{"version":3,"sources":["components/NavigationBar.tsx","TogglContext.tsx","components/NewFavorite.tsx","pages/Favorites.tsx","pages/Weekly.tsx","pages/Home.tsx","App.tsx","index.tsx"],"names":["SimpleBottomNavigation","React","useState","value","setValue","history","useHistory","currentPath","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","TogglContext","createContext","entries","setEntries","projects","setProjects","goals","setGoals","favorites","setFavorites","a","NewFavorite","props","description","setDescription","project","setProject","useContext","isEditing","setEditing","Paper","noValidate","autoComplete","TextField","id","target","placeholder","variant","ButtonGroup","Button","onClick","startIcon","fontSize","size","FavoritesPage","console","log","map","favorite","WeeklyPage","HomePage","togglClient","TogglClient","apiToken","process","App","providerValue","useMemo","useEffect","updateProjects","timeEntries","set","Set","item","pid","uniqueProjects","Array","from","forEach","entry","getProjectData","err","projectData","sum","duration","getTimeEntries","date","Date","day","getDay","prevMonday","setDate","getDate","setHours","toISOString","getPreviousMonday","isRunning","className","path","exact","component","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e59b1953.chunk.js","sourcesContent":["import React from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport { AppBar } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = React.useState('/');\r\n    const history = useHistory();\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/toboard/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Favorites\" value=\"/toboard/favorites\" icon={<FavoriteIcon />} />\r\n                <BottomNavigationAction label=\"Weekly Progress\" value=\"/toboard/weekly\" icon={<BarChartIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import { createContext } from \"react\";\r\nimport { Entry, Goal, Project } from \"./typings/my-types\";\r\n\r\nexport const TogglContext = createContext({\r\n    entries: [] as Array<Entry>,\r\n    setEntries: {} as unknown,\r\n\r\n    projects: [] as Array<Project>,\r\n    setProjects: {} as unknown,\r\n\r\n    goals: [] as Array<Goal>,\r\n    setGoals: {} as unknown,\r\n\r\n    favorites: [] as Array<Entry>,\r\n    setFavorites: (a: any) => { },\r\n});\r\n","import React, { useContext, useEffect, useRef } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { TogglContext } from '../TogglContext';\r\nimport { Entry, Favorite } from '../typings/my-types';\r\n\r\nexport default function NewFavorite(props: any) {\r\n\r\n    const [description, setDescription] = useState('')\r\n    const [project, setProject] = useState('')\r\n    const { favorites, setFavorites } = useContext(TogglContext)\r\n\r\n    const [isEditing, setEditing] = useState(false)\r\n    if (isEditing) {\r\n        return (\r\n            <>\r\n                <Paper>\r\n                    <h4>New Favorite</h4>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <TextField\r\n                            id=\"description\"\r\n                            label=\"Description\"\r\n                            onChange={(event) => setDescription(event.target.value)}\r\n                            placeholder=\"\"\r\n                            variant=\"outlined\" />\r\n                        <TextField\r\n                            id=\"project\"\r\n                            label=\"Project\"\r\n                            onChange={(event) => setProject(event.target.value)}\r\n                            placeholder=\"\"\r\n                            variant=\"outlined\" />\r\n                    </form>\r\n                    <ButtonGroup\r\n                        variant=\"text\"\r\n                        color=\"primary\"\r\n                        aria-label=\"text primary button group\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                setFavorites([...favorites, { description: description, project: project, position: 0 }])\r\n                                setEditing(false)\r\n                            }}>Save</Button>\r\n                        <Button\r\n                            onClick={() => setEditing(false)}>Cancel</Button>\r\n                    </ButtonGroup>\r\n                </Paper>\r\n            </>\r\n        )\r\n    } else\r\n        return (\r\n            <Button\r\n                startIcon={<AddIcon fontSize=\"large\" />}\r\n                onClick={() => setEditing(true)}\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                New Favorite\r\n            </Button>\r\n        )\r\n}","import { useContext } from 'react'\r\nimport Favorite from '../components/Favorite'\r\nimport NewFavorite from '../components/NewFavorite'\r\nimport { TogglContext } from '../TogglContext'\r\n\r\nexport default function FavoritesPage() {\r\n    const { favorites } = useContext(TogglContext)\r\n    console.log('hi', favorites)\r\n\r\n    return (\r\n        <>\r\n            Favorites\r\n            {favorites.map(favorite => <div>\r\n                <h5>{favorite.description} </h5>\r\n                {/* <Favorite entry={favorite} /> */}\r\n            </div>)}\r\n            <br />\r\n            <NewFavorite />\r\n        </>\r\n    )\r\n}","export default function WeeklyPage() {\r\n    return <div> WeeklyPage </div>\r\n}","export default function HomePage() {\r\n    return <div> Welcome to toboard! </div>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport FavoritesPage from './pages/Favorites'\r\nimport WeeklyPage from './pages/Weekly'\r\nimport HomePage from './pages/Home';\r\n\r\nimport TogglClient from \"toggl-api\";\r\nimport { TogglContext } from './TogglContext';\r\nimport { useState, useMemo } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Entry, Goal, Project } from './typings/my-types';\r\n\r\nconst togglClient = new TogglClient({\r\n  apiToken: process.env.REACT_APP_TOGGL_API\r\n});\r\n\r\n\r\nfunction getPreviousMonday() {\r\n  var date = new Date();\r\n  var day = date.getDay();\r\n  var prevMonday = new Date();\r\n  if (date.getDay() === 0) {\r\n    prevMonday.setDate(date.getDate() - 7);\r\n  } else {\r\n    prevMonday.setDate(date.getDate() - (day - 1));\r\n  }\r\n  prevMonday.setHours(0, 0, 0, 0);\r\n  return prevMonday.toISOString();\r\n}\r\n\r\n\r\nexport default function App() {\r\n\r\n  const [entries, setEntries] = useState([] as Array<Entry>)\r\n  const [projects, setProjects] = useState([] as Array<Project>)\r\n  const [goals, setGoals] = useState([] as Array<Goal>)\r\n  const [favorites, setFavorites] = useState([] as Array<Entry>)\r\n\r\n  const providerValue = useMemo(() => ({\r\n    entries, setEntries,\r\n    projects, setProjects,\r\n    goals, setGoals,\r\n    favorites, setFavorites,\r\n  }), [entries, projects, goals, favorites]\r\n  )\r\n  console.log('inited', entries, projects)\r\n  useEffect(() => {\r\n    console.log('Rendering App')\r\n    togglClient.getTimeEntries(\r\n      getPreviousMonday(),\r\n      new Date().toISOString(),\r\n      async (err: any, timeEntries: any) => {\r\n        if (err) {\r\n          console.log(\"Error getting timeEntries: \", err);\r\n        } else {\r\n          console.log(\"Received timeEntries:\", timeEntries)\r\n          timeEntries.forEach((entry: any) => {\r\n            entry.isRunning = entry.duration < 0\r\n\r\n          });\r\n          setEntries(timeEntries)\r\n          updateProjects(timeEntries);\r\n        }\r\n      }\r\n    );\r\n    function updateProjects(timeEntries: any) {\r\n      const set = new Set(timeEntries.map((item: { pid: any; }) => item.pid));\r\n      let uniqueProjects = Array.from(set);\r\n      let projects = [] as Array<Project>;\r\n      uniqueProjects.forEach((entry) => {\r\n        togglClient.getProjectData(entry, (err: any, projectData: any) => {\r\n          if (err) {\r\n            console.log(\"error: \", err);\r\n          } else {\r\n            projectData.sum = 0;\r\n            timeEntries.forEach((entry: any) => {\r\n              if (entry.pid === projectData.id) {\r\n                if (entry.duration > 0) projectData.sum += entry.duration;\r\n              }\r\n            });\r\n            projects.push(projectData)\r\n          }\r\n        });\r\n      });\r\n      setProjects(projects)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Switch>\r\n          <Route path='/toboard/' exact component={HomePage} />\r\n          <TogglContext.Provider value={providerValue}>\r\n            <Route path='/toboard/favorites' component={FavoritesPage} />\r\n            <Route path='/toboard/weekly' component={WeeklyPage} />\r\n          </TogglContext.Provider>\r\n        </Switch>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}