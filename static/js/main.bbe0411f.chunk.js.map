{"version":3,"sources":["history.tsx","components/NavigationBar.tsx","modules/togglClient.ts","modules/CustomClient.ts","TogglContext.tsx","components/ToggleComponent.tsx","components/Favorite.tsx","modules/firebaseClient.ts","components/NewFavorite.tsx","pages/Favorites.tsx","pages/Home.tsx","components/Progress.tsx","components/Goal.tsx","components/NewGoal.tsx","pages/Weekly.tsx","pages/Settings.tsx","App.tsx","index.tsx"],"names":["createHashHistory","SimpleBottomNavigation","React","useState","value","setValue","currentPath","history","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","togglClient","TogglClient","apiToken","process","Toggle","entry","setCurrent","getCurrentTimeEntry","err","timeEntry","console","log","description","pid","entryID","stopTimeEntry","Stop","id","Start","startTimeEntry","TogglContext","createContext","currentEntry","setCurrentEntry","a","entries","setEntries","projects","setProjects","goals","setGoals","favorites","setFavorites","ToggleComponent","props","isRunning","setRunning","useContext","useEffect","Button","size","startIcon","fontSize","variant","onClick","FavoriteComponent","favorite","showLabel","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","sendProjects","forEach","project","setDoc","doc","toString","error","sendGoals","goal","addDoc","collection","ref","sendFavorites","receiveFavorites","getDocs","querySnapshot","data","NewFavorite","setDescription","setProject","isEditing","setEditing","Paper","noValidate","autoComplete","TextField","target","placeholder","ButtonGroup","fav","length","FavoritesPage","map","HomePage","to","Progress","BorderLinearProgress","withStyles","theme","root","height","borderRadius","colorPrimary","backgroundColor","palette","grey","type","bar","LinearProgress","valueBuffer","GoalComponent","NewGoal","setTarget","WeeklyPage","SettingsPage","name","App","JSON","parse","localStorage","getItem","providerValue","useMemo","setItem","stringify","updateProjects","timeEntries","set","Set","item","Array","from","filter","x","getProjectData","projectData","sum","duration","findIndex","p","getTimeEntries","date","Date","day","getDay","prevMonday","setDate","getDate","setHours","toISOString","getPreviousMonday","className","path","exact","component","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbe0411f.chunk.js","sourcesContent":["import { createHashHistory } from 'history'\r\nexport default createHashHistory({\r\n})","import React from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { AppBar } from '@material-ui/core';\r\nimport history from '../history';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = React.useState('/');\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Favorites\" value=\"/favorites\" icon={<FavoriteIcon />} />\r\n                <BottomNavigationAction label=\"Weekly Progress\" value=\"/weekly\" icon={<BarChartIcon />} />\r\n                <BottomNavigationAction label=\"Settings\" value=\"/settings\" icon={<SettingsIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import TogglClient from \"toggl-api\";\r\n\r\nexport const togglClient = new TogglClient({\r\n    apiToken: process.env.REACT_APP_TOGGL_API\r\n});","\r\nimport { Entry, Favorite } from \"../typings/my-types\";\r\nimport { togglClient } from './togglClient';\r\n\r\nexport function Toggle(entry: Entry | Favorite, setCurrent: any) {\r\n    togglClient.getCurrentTimeEntry((err: any, timeEntry: any) => {\r\n        if (err) console.log(err);\r\n        else {\r\n            if (timeEntry) {\r\n                console.log(\"Something already running: \", timeEntry.description, timeEntry.pid);\r\n                console.log(\"Checking if it is:\", entry);\r\n                if ((timeEntry.pid === entry.pid || 0) && timeEntry.description === entry.description) {\r\n                    console.log('Matched! Stopping');\r\n                    Stop(timeEntry.id, setCurrent)\r\n                } else {\r\n                    console.log('Not Matched! Starting new');\r\n                    Start(entry, setCurrent);\r\n                }\r\n            } else {\r\n                console.log(\"Nothing running! Starting new\");\r\n                Start(entry, setCurrent);\r\n            }\r\n        }\r\n    })\r\n}\r\nexport function Start(entry: Entry | Favorite, setCurrent: any) {\r\n    togglClient.startTimeEntry({\r\n        description: entry.description,\r\n        pid: entry.pid,\r\n    },\r\n        (err: any, timeEntry: any) => {\r\n            if (err) console.log(err);\r\n            else {\r\n                setCurrent(timeEntry)\r\n                console.log(setCurrent, \"Succefully started: \", timeEntry);\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nexport function Stop(entryID: number, setCurrent: any) {\r\n    console.log(\"Stopping: \" + entryID);\r\n    togglClient.stopTimeEntry(entryID, (err: any, timeEntry: Entry) => {\r\n        if (err) console.log(err);\r\n        else {\r\n            setCurrent(\"{}\")\r\n            console.log(\"succefully stopped \", timeEntry);\r\n        }\r\n    });\r\n}\r\n    // getProject(entry) {\r\n    //     return this.$store.state.projects.find(p => p.id == entry.pid)\r\n    // },\r\n    // getSumEntries(entryDescription) {\r\n    //     let goalEntries = [];\r\n    //     let goalSum = 0;\r\n    //     this.$store.state.timeEntries.forEach((entry) => {\r\n    //         if (entry.description == entryDescription && entry.duration > 0) {\r\n    //             goalEntries.push(entry);\r\n    //             goalSum += entry.duration;\r\n    //         }\r\n    //     });\r\n    //     return goalSum;\r\n    // }\r\n\r\n","import { createContext } from \"react\";\r\nimport { Entry, Goal, Project, Favorite } from \"./typings/my-types\";\r\n\r\nexport const TogglContext = createContext({\r\n    currentEntry: {} as any,\r\n    setCurrentEntry: (a: any) => { },\r\n\r\n    entries: [] as Array<Entry>,\r\n    setEntries: {} as unknown,\r\n\r\n    projects: [] as Array<Project>,\r\n    setProjects: {} as unknown,\r\n\r\n    goals: [] as Array<Goal>,\r\n    setGoals: (a: any) => { },\r\n\r\n    favorites: [] as Array<Favorite>,\r\n    setFavorites: (a: any) => { },\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport { Entry, Favorite, Goal } from '../typings/my-types';\r\nimport { Toggle } from '../modules/CustomClient';\r\n\r\nimport { useContext } from 'react'\r\nimport { TogglContext } from '../TogglContext'\r\n\r\ninterface Prop {\r\n    entry: Entry | Favorite | Goal;\r\n    showLabel?: boolean;\r\n}\r\n\r\nexport default function ToggleComponent(props: Prop) {\r\n    const [isRunning, setRunning] = React.useState(props.entry.isRunning);\r\n    const { currentEntry, setCurrentEntry } = useContext(TogglContext)\r\n\r\n    props.entry.isRunning = isRunning || false\r\n    const handleClick = () => {\r\n        setRunning(!props.entry.isRunning)\r\n        Toggle(props.entry, setCurrentEntry);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!currentEntry) return\r\n        setRunning(currentEntry.description === props.entry.description)//todo add project checking aswell\r\n    }, [currentEntry, props.entry.description])\r\n\r\n    return (\r\n        <Button\r\n            size=\"large\"\r\n            startIcon={isRunning ? <PauseCircleFilledIcon fontSize=\"large\" /> : <PlayArrowIcon fontSize=\"large\" />}\r\n            variant=\"contained\" color=\"primary\" onClick={handleClick}>{props.entry.description}\r\n        </Button>\r\n    )\r\n}","import { Favorite } from '../typings/my-types'\r\nimport Toggle from './ToggleComponent'\r\n\r\nexport default function FavoriteComponent(props: { favorite: Favorite }) {\r\n    return (\r\n        <Toggle entry={props.favorite} showLabel={true} />\r\n    )\r\n}","import { initializeApp } from \"firebase/app\";\r\nimport { getDocs, getFirestore } from \"firebase/firestore\";\r\nimport { doc, collection, addDoc, setDoc } from \"firebase/firestore\";\r\nimport { Favorite, Goal, Project } from \"../typings/my-types\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API,\r\n    authDomain: \"toboard-e8982.firebaseapp.com\",\r\n    projectId: \"toboard-e8982\",\r\n    storageBucket: \"toboard-e8982.appspot.com\",\r\n    messagingSenderId: \"1038554107141\",\r\n    appId: \"1:1038554107141:web:e0f0e94ee798443df0fb6c\"\r\n};\r\ninitializeApp(firebaseConfig);\r\nconst db = getFirestore();\r\n\r\nexport const sendProjects = async (projects: Array<Project>) => {\r\n    projects.forEach(async (project) => {\r\n        try {\r\n            if (!process.env.REACT_APP_TOGGL_API) return\r\n            await setDoc(doc(db, \"users\", process.env.REACT_APP_TOGGL_API.toString(), \"projects\", project.id.toString()), {\r\n                project\r\n            });\r\n            console.log(\"Project sent to db\");\r\n\r\n        } catch (e) {\r\n            console.error(\"Error sending project to db: \", e);\r\n        }\r\n    });\r\n}\r\nexport const sendGoals = async (goals: Array<Goal>) => {\r\n    goals.forEach(async (goal) => {\r\n        try {\r\n            if (!process.env.REACT_APP_TOGGL_API) return\r\n            let ref = await addDoc(collection(db, \"users\", process.env.REACT_APP_TOGGL_API.toString(), \"goals\"), {\r\n                project: goal\r\n            });\r\n            console.log(\"Goal sent to db:\", ref.id);\r\n\r\n        } catch (e) {\r\n            console.error(\"Error sending Goal to db: \", e);\r\n        }\r\n    });\r\n}\r\nexport const sendFavorites = async (favorites: Array<Favorite>) => {\r\n    favorites.forEach(async (favorite) => {\r\n        try {\r\n            if (!process.env.REACT_APP_TOGGL_API) return\r\n            let ref = await addDoc(collection(db, \"users\", process.env.REACT_APP_TOGGL_API.toString(), \"favorites\"), {\r\n                project: favorite\r\n            });\r\n            console.log(\"Favorite sent to db: \", ref.id);\r\n\r\n        } catch (e) {\r\n            console.error(\"Error sending favorite to db: \", e);\r\n        }\r\n    });\r\n}\r\nexport const receiveFavorites = async () => {\r\n    if (!process.env.REACT_APP_TOGGL_API) return\r\n    // const docRef = doc(db, \"users\", process.env.REACT_APP_TOGGL_API.toString());\r\n    // const docSnap = await getDoc(docRef);\r\n\r\n    // if (docSnap.exists()) {\r\n    //     console.log(\"Document data:\", docSnap.data());\r\n    // } else {\r\n    //     // doc.data() will be undefined in this case\r\n    //     console.log(\"No such document!\");\r\n    // }\r\n    const querySnapshot = await getDocs(collection(db, \"users\", process.env.REACT_APP_TOGGL_API.toString(), \"favorites\"));\r\n    let favorites: Array<Favorite> = []\r\n    querySnapshot.forEach((doc) => {\r\n        console.log(\"Received favorite from db: \", doc.id, \" => \", doc.data().project);\r\n        favorites.push(doc.data().project as Favorite)\r\n    });\r\n\r\n    return favorites;\r\n\r\n\r\n}","import { useContext } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { TogglContext } from '../TogglContext';\r\nimport { sendFavorites } from '../modules/firebaseClient';\r\n\r\nexport default function NewFavorite(props: any) {\r\n\r\n    const [description, setDescription] = useState('')\r\n    const [project, setProject] = useState('')\r\n    const { favorites, setFavorites } = useContext(TogglContext)\r\n\r\n    const [isEditing, setEditing] = useState(false)\r\n    if (isEditing) {\r\n        return (\r\n            <>\r\n                <Paper>\r\n                    <h4>New Favorite</h4>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <TextField\r\n                            id=\"description\"\r\n                            label=\"Description\"\r\n                            onChange={(event) => setDescription(event.target.value)}\r\n                            placeholder=\"\"\r\n                            variant=\"outlined\" />\r\n                        <TextField\r\n                            id=\"project\"\r\n                            label=\"Project\"\r\n                            onChange={(event) => setProject(event.target.value)}\r\n                            placeholder=\"\"\r\n                            variant=\"outlined\" />\r\n                    </form>\r\n                    <ButtonGroup\r\n                        variant=\"text\"\r\n                        color=\"primary\"\r\n                        aria-label=\"text primary button group\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                const fav: any = { description: description, project: project, position: favorites.length }\r\n                                sendFavorites([fav])\r\n                                setFavorites([...favorites, fav])\r\n                                setEditing(false)\r\n                            }}>Save</Button>\r\n                        <Button\r\n                            onClick={() => setEditing(false)}>Cancel</Button>\r\n                    </ButtonGroup>\r\n                </Paper>\r\n            </>\r\n        )\r\n    } else\r\n        return (\r\n            <Button\r\n                startIcon={<AddIcon fontSize=\"large\" />}\r\n                onClick={() => setEditing(true)}\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                New Favorite\r\n            </Button>\r\n        )\r\n}","import { useContext } from 'react'\r\nimport Favorite from '../components/Favorite'\r\nimport NewFavorite from '../components/NewFavorite'\r\nimport { TogglContext } from '../TogglContext'\r\n\r\nexport default function FavoritesPage() {\r\n    const { favorites } = useContext(TogglContext)\r\n    console.log('Favorites:', favorites)\r\n    return (\r\n        <>\r\n            {favorites.map(favorite =>\r\n                <Favorite key={favorite.position} favorite={favorite} />\r\n            )}\r\n            <br />\r\n            <NewFavorite />\r\n        </>\r\n    )\r\n}","import { Link } from \"react-router-dom\";\r\nexport default function HomePage() {\r\n    return <div> Welcome to toboard!\r\n        <li><Link to=\"/\">Home</Link></li>\r\n        <li><Link to=\"/favorites\">Favorites</Link></li>\r\n    </div>\r\n}","import { withStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\ninterface Prop {\r\n    value: number;\r\n    color: string;\r\n    isRunning: boolean;\r\n}\r\nexport default function Progress(props: Prop) {\r\n    const BorderLinearProgress = withStyles((theme) => ({\r\n        root: {\r\n            height: 50,\r\n            borderRadius: 5,\r\n        },\r\n        colorPrimary: {\r\n            backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n        },\r\n        bar: {\r\n            borderRadius: 5,\r\n            backgroundColor: props.color,\r\n        },\r\n    }))(LinearProgress);\r\n    return (\r\n        <BorderLinearProgress variant={props.isRunning ? 'buffer' : 'determinate'} value={props.value} valueBuffer={0} />\r\n    )\r\n}","import Progress from './Progress'\r\nimport { Goal } from '../typings/my-types'\r\nimport ToggleComponent from './ToggleComponent'\r\n\r\nexport default function GoalComponent(props: { goal: Goal }) {\r\n    return (\r\n        <div>\r\n            <Progress isRunning={true} value={10} color={'red'} />\r\n            <ToggleComponent entry={props.goal} showLabel={true} />\r\n        </div>\r\n    )\r\n}","import { useContext } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { TogglContext } from '../TogglContext';\r\nimport { sendGoals } from '../modules/firebaseClient';\r\n\r\nexport default function NewGoal(props: any) {\r\n\r\n    const [description, setDescription] = useState('')\r\n    const [project, setProject] = useState('')\r\n    const [target, setTarget] = useState('')\r\n    const { goals, setGoals } = useContext(TogglContext)\r\n\r\n    const [isEditing, setEditing] = useState(false)\r\n    if (isEditing) {\r\n        return (\r\n            <>\r\n                <Paper>\r\n                    <h4>New Weekly Goal</h4>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <TextField\r\n                            id=\"description\"\r\n                            label=\"Description\"\r\n                            onChange={(event) => setDescription(event.target.value)}\r\n                            placeholder=\"\"\r\n                            variant=\"outlined\" />\r\n                        <TextField\r\n                            id=\"project\"\r\n                            label=\"Project\"\r\n                            onChange={(event) => setProject(event.target.value)}\r\n                            placeholder=\"\"\r\n                            variant=\"outlined\" />\r\n                        <TextField\r\n                            id=\"target\"\r\n                            label=\"Target in minutes\"\r\n                            onChange={(event) => setTarget(event.target.value)}\r\n                            placeholder=\"\"\r\n                            variant=\"outlined\" />\r\n                    </form>\r\n                    <ButtonGroup\r\n                        variant=\"text\"\r\n                        color=\"primary\"\r\n                        aria-label=\"text primary button group\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                const goal: any = { description: description, project: project, position: goals.length, target: target }\r\n                                sendGoals([goal])\r\n                                setGoals([...goals, goal])\r\n                                setEditing(false)\r\n                            }}>Save</Button>\r\n                        <Button\r\n                            onClick={() => setEditing(false)}>Cancel</Button>\r\n                    </ButtonGroup>\r\n                </Paper>\r\n            </>\r\n        )\r\n    } else\r\n        return (\r\n            <Button\r\n                startIcon={<AddIcon fontSize=\"large\" />}\r\n                onClick={() => setEditing(true)}\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                New Weekly Goal\r\n            </Button>\r\n        )\r\n}","import { useContext } from 'react'\r\nimport Goal from '../components/Goal'\r\nimport NewGoal from '../components/NewGoal'\r\nimport { TogglContext } from '../TogglContext'\r\n\r\n\r\nexport default function WeeklyPage() {\r\n    const { goals } = useContext(TogglContext)\r\n    console.log('Goals:', goals)\r\n    return (\r\n        <>\r\n            {goals.map(goal =>\r\n                <Goal key={goal.position} goal={goal} />\r\n            )}\r\n            <br />\r\n            <NewGoal />\r\n        </>\r\n    )\r\n}","\r\nimport { Button } from '@material-ui/core'\r\nimport { useContext } from 'react'\r\nimport { sendProjects } from '../modules/firebaseClient'\r\nimport { TogglContext } from '../TogglContext'\r\n\r\nexport default function SettingsPage() {\r\n    const { entries, projects } = useContext(TogglContext)\r\n    return <>\r\n        <h1>\r\n            SettingsPage\r\n        </h1>\r\n        api/user = {process.env.REACT_APP_TOGGL_API}\r\n        <span>\r\n            <h5>Projects</h5>\r\n            {projects.map(project =>\r\n                <div key={project.id}>{project.name} - {project.id}</div>\r\n            )}\r\n            <Button\r\n                onClick={() => { sendProjects(projects) }}\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Send Projects to database\r\n            </Button>\r\n        </span>\r\n        <span>\r\n            <h5>Entries</h5>\r\n            {entries.map(entry =>\r\n                <div key={entry.id}>{entry.description} - {entry.id}</div>\r\n            )}\r\n        </span>\r\n\r\n    </>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Router } from 'react-router-dom'\r\n\r\nimport history from './history'\r\n\r\nimport FavoritesPage from './pages/Favorites'\r\nimport HomePage from './pages/Home';\r\nimport WeeklyPage from './pages/Weekly'\r\nimport SettingsPage from './pages/Settings'\r\n\r\nimport { TogglContext } from './TogglContext';\r\nimport { useState, useMemo } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Entry, Favorite, Goal, Project } from './typings/my-types';\r\nimport { togglClient } from './modules/togglClient';\r\nimport { receiveFavorites } from './modules/firebaseClient';\r\n\r\n\r\nfunction getPreviousMonday() {\r\n  var date = new Date();\r\n  var day = date.getDay();\r\n  var prevMonday = new Date();\r\n  if (date.getDay() === 0) {\r\n    prevMonday.setDate(date.getDate() - 7);\r\n  } else {\r\n    prevMonday.setDate(date.getDate() - (day - 1));\r\n  }\r\n  prevMonday.setHours(0, 0, 0, 0);\r\n  return prevMonday.toISOString();\r\n}\r\n\r\nexport default function App() {\r\n  const [currentEntry, setCurrentEntry] = useState(\r\n    () => JSON.parse(localStorage.getItem(\"currentEntry\") || \"{}\") as Entry)\r\n  const [entries, setEntries] = useState(\r\n    () => JSON.parse(localStorage.getItem(\"entries\") || \"[]\") as Array<Entry>)\r\n  const [projects, setProjects] = useState(\r\n    () => JSON.parse(localStorage.getItem(\"projects\") || \"[]\") as Array<Project>)\r\n  const [goals, setGoals] = useState(\r\n    () => JSON.parse(localStorage.getItem(\"goals\") || \"[]\") as Array<Goal>)\r\n  const [favorites, setFavorites] = useState(\r\n    () => JSON.parse(localStorage.getItem(\"favorites\") || \"[]\") as Array<Favorite>)\r\n\r\n\r\n  const providerValue = useMemo(() => ({\r\n    currentEntry, setCurrentEntry,\r\n    entries, setEntries,\r\n    projects, setProjects,\r\n    goals, setGoals,\r\n    favorites, setFavorites,\r\n  }), [currentEntry, entries, projects, goals, favorites]\r\n  )\r\n  useEffect(() => {\r\n    console.log('----------------------current changed to', currentEntry);\r\n\r\n    localStorage.setItem(\"currentEntry\", JSON.stringify(currentEntry))\r\n  }, [currentEntry])\r\n  useEffect(() => {\r\n    localStorage.setItem(\"entries\", JSON.stringify(entries))\r\n    entries.forEach(entry => {\r\n      if (entry.isRunning) {\r\n        setCurrentEntry(entry)\r\n      }\r\n    });\r\n  }, [entries])\r\n  useEffect(() => {\r\n    console.log('projects changed', projects)\r\n    localStorage.setItem(\"projects\", JSON.stringify(projects))\r\n  }, [projects])\r\n  useEffect(() => {\r\n    localStorage.setItem(\"goals\", JSON.stringify(goals))\r\n  }, [goals])\r\n  useEffect(() => {\r\n    localStorage.setItem(\"favorites\", JSON.stringify(favorites))\r\n  }, [favorites])\r\n\r\n  useEffect(() => {\r\n    console.log('Rendering App')\r\n    if (favorites.length === 0) {\r\n      (async () => {\r\n        setFavorites(await receiveFavorites() || [])\r\n      })()\r\n    }\r\n    togglClient.getTimeEntries(\r\n      getPreviousMonday(),\r\n      new Date().toISOString(),\r\n      async (err: any, timeEntries: any) => {\r\n        if (err) {\r\n          console.log(\"Error getting timeEntries: \", err);\r\n        } else {\r\n          console.log(\"Received timeEntries:\", timeEntries)\r\n          timeEntries.forEach((entry: any) => {\r\n            entry.isRunning = entry.duration < 0\r\n          });\r\n          setEntries(timeEntries)\r\n          updateProjects(timeEntries);\r\n        }\r\n      }\r\n    );\r\n    function updateProjects(timeEntries: any) {\r\n      const set = new Set(timeEntries.map((item: { pid: any; }) => item.pid));\r\n      let uniqueProjects = Array.from(set).filter(x => x);\r\n      uniqueProjects.forEach((entry) => {\r\n        togglClient.getProjectData(entry, (err: any, projectData: any) => {\r\n          if (err) {\r\n            console.log(\"Error getting projectData for project: \", entry, err);\r\n          } else {\r\n            projectData.sum = 0;\r\n            timeEntries.forEach((entry: any) => {\r\n              if (entry.pid === projectData.id) {\r\n                if (entry.duration > 0) projectData.sum += entry.duration;\r\n              }\r\n            });\r\n            console.log(\"Received project:\", projectData, projects)\r\n            if (projects.findIndex(p => p.id === projectData.id) === -1) {\r\n              projects.push(projectData)\r\n              setProjects(projects)\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router history={history}>\r\n          <Route path='/' exact component={HomePage} />\r\n          <TogglContext.Provider value={providerValue}>\r\n            <Route path='/favorites' component={FavoritesPage} />\r\n            <Route path='/weekly' component={WeeklyPage} />\r\n            <Route path='/settings' component={SettingsPage} />\r\n          </TogglContext.Provider>\r\n        </Router>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}